apiVersion: batch/v1
kind: Job
metadata:
  name: fabric-enroll-{{ORG_ID}}
spec:
  template:
    spec:
      containers:
      - name: fabric-cli
        image: hyperledger/fabric-ca:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            # Set up directories
            mkdir -p /etc/hyperledger/fabric-ca-client
            export FABRIC_CA_CLIENT_HOME=/etc/hyperledger/fabric-ca-client

            # 1. ENROLL CA ADMIN
            echo "Enrolling CA Admin..."
            fabric-ca-client enroll -u http://admin:adminpw@fabric-ca:7054

            # 2. PEER ENROLLMENT
            echo "Registering peer0.{{ORG_ID}}..."
            fabric-ca-client register --id.name peer0.{{ORG_ID}} --id.secret peer0pw --id.type peer --id.attrs '"hf.Registrar.Roles=peer,client"'
            
            # MSP Enrollment
            fabric-ca-client enroll -u http://peer0.{{ORG_ID}}:peer0pw@fabric-ca:7054 \
              -M /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/peers/peer0.{{ORG_ID}}.example.com/msp
            
            # TLS Enrollment
            fabric-ca-client enroll -u http://peer0.{{ORG_ID}}:peer0pw@fabric-ca:7054 \
              --enrollment.profile tls \
              -M /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/peers/peer0.{{ORG_ID}}.example.com/tls \
              --csr.hosts peer0.{{ORG_ID}}.example.com

            # 3. ORDERER ENROLLMENT (create one orderer per peer org)
            ORDERER_NUM=$(echo "{{ORG_ID}}" | sed 's/org//')  # Extracts 1, 2, or 3 from org1, org2, org3
            ORDERER_NAME="orderer${ORDERER_NUM}"
            
            echo "Registering ${ORDERER_NAME}..."
            fabric-ca-client register --id.name ${ORDERER_NAME} --id.secret ordererpw --id.type orderer
              
            # Orderer MSP
            fabric-ca-client enroll -u http://${ORDERER_NAME}:ordererpw@fabric-ca:7054 \
              -M /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/orderers/${ORDERER_NAME}.example.com/msp
            
            # Orderer TLS
            fabric-ca-client enroll -u http://${ORDERER_NAME}:ordererpw@fabric-ca:7054 \
              --enrollment.profile tls \
              -M /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/orderers/${ORDERER_NAME}.example.com/tls \
              --csr.hosts ${ORDERER_NAME}.example.com

            # Create Orderer Org MSP config (only once)
            if [ "{{ORG_ID}}" = "org1" ]; then
              mkdir -p /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp
              echo "NodeOUs:" > /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "  Enable: true" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "  ClientOUIdentifier:" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "    Certificate: cacerts/fabric-ca-7054.pem" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "    OrganizationalUnitIdentifier: client" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "  PeerOUIdentifier:" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "    Certificate: cacerts/fabric-ca-7054.pem" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "    OrganizationalUnitIdentifier: peer" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "  AdminOUIdentifier:" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "    Certificate: cacerts/fabric-ca-7054.pem" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "    OrganizationalUnitIdentifier: admin" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "  OrdererOUIdentifier:" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "    Certificate: cacerts/fabric-ca-7054.pem" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
              echo "    OrganizationalUnitIdentifier: orderer" >> /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml
            else
              sleep 10 # Wait for the orderer msp config.yaml to be created
            fi


            # Copy orderer config.yaml to orderer MSP
            cp /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/msp/config.yaml \
              /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/orderers/${ORDERER_NAME}.example.com/msp/

            # Rename/copy private key and cert to fixed names for easier config mapping
            cp /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/orderers/${ORDERER_NAME}.example.com/tls/keystore/* \
              /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/orderers/${ORDERER_NAME}.example.com/tls/server.key

            cp /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/orderers/${ORDERER_NAME}.example.com/tls/signcerts/cert.pem \
              /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/orderers/${ORDERER_NAME}.example.com/tls/server.crt

            cp /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/orderers/${ORDERER_NAME}.example.com/tls/tlscacerts/*.pem \
              /etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/orderers/${ORDERER_NAME}.example.com/tls/ca.crt


            # 4. CREATE PEER ORG CONFIG.YAML
            mkdir -p /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp
            echo "NodeOUs:" > /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "  Enable: true" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "  ClientOUIdentifier:" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "    Certificate: cacerts/*.pem" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "    OrganizationalUnitIdentifier: client" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "  PeerOUIdentifier:" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "    Certificate: cacerts/*.pem" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "    OrganizationalUnitIdentifier: peer" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "  AdminOUIdentifier:" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "    Certificate: cacerts/*.pem" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "    OrganizationalUnitIdentifier: admin" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "  OrdererOUIdentifier:" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "    Certificate: cacerts/*.pem" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml
            echo "    OrganizationalUnitIdentifier: orderer" >> /etc/hyperledger/fabric/crypto-config/peerOrganizations/{{ORG_ID}}.example.com/msp/config.yaml


            echo "Enrollment completed for {{ORG_ID}}!"
        volumeMounts:
          - name: fabric-data
            mountPath: /etc/hyperledger/fabric
      restartPolicy: Never
      volumes:
      - name: fabric-data
        persistentVolumeClaim:
          claimName: fabric-pvc
  backoffLimit: 3