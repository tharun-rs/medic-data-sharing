#!/bin/bash

# Stop all deployments if "stop" is passed as the first argument
if [ "$1" == "stop" ]; then
    echo "Stopping all deployments..."
    kubectl delete deployments --all
    kubectl delete services --all
    kubectl delete jobs --all
    kubectl delete configmaps --all
    kubectl delete secrets --all
    sudo rm -rf /home/tharunrs/fabric-data/*
    exit 0
fi

# Create images for all apps
docker build -t edge-app:latest ./edge-app
kind load docker-image edge-app:latest
docker build -t ipfs-app:latest ./ipfs
kind load docker-image ipfs-app:latest
docker build -t bootstrap-app:latest ./bootstraps
kind load docker-image bootstrap-app:latest


# Define organizations
declare -A ORGS
ORGS=( ["org1"]="Org1" ["org2"]="Org2" ["org3"]="Org3" )

ORG_IDS=$(echo ${!ORGS[@]} | tr ' ' ',')


# Create a PVC for crypto materials
kubectl apply -f k8s/pvc.yml

#generate cert for fabric-ca
#  Run the following command to generate TLS certificates for Fabric CA only once
if [ ! -f tls-cert.pem ] || [ ! -f tls-key.pem ]; then
    openssl req -newkey rsa:2048 -nodes -keyout tls-key.pem \
        -x509 -days 365 -out tls-cert.pem \
        -subj "/CN=fabric-ca" \
        -addext "subjectAltName = DNS:fabric-ca, DNS:fabric-ca.default.svc.cluster.local" \
        -addext "extendedKeyUsage = serverAuth, clientAuth" \
        -addext "keyUsage = digitalSignature, keyEncipherment"
fi

kubectl create secret generic fabric-ca-tls --from-file=tls-cert.pem --from-file=tls-key.pem

# Deploy Fabric CA
kubectl create configmap fabric-ca-config --from-file=k8s/fabric-ca-server-config.yaml
kubectl apply -f k8s/fabric-ca.yml

echo "waiting for Fabric CA to be ready..."
sleep 10

for ORG_ID in "${!ORGS[@]}"; do
    ORG_NAME=${ORGS[$ORG_ID]}

    echo "Running Fabric Enroll Job for $ORG_NAME ($ORG_ID)..."
    sed -e "s/{{ORG_ID}}/$ORG_ID/g" k8s/fabric-enroll-job-template.yml > fabric-enroll-$ORG_ID.yaml
    kubectl apply -f fabric-enroll-$ORG_ID.yaml
    rm -f fabric-enroll-$ORG_ID.yaml

done

echo "Waiting for Fabric CA enrollment jobs to complete..."
sleep 10

echo "Generating ConfigTx.yaml..."
sed -e "s/{{ORG_IDS}}/$ORG_IDS/g" k8s/configtx-job-template.yml > configtx-job.yaml
kubectl apply -f configtx-job.yaml
rm -f configtx-job.yaml
echo "Waiting for configtx.yaml generation to complete..."
kubectl wait --for=condition=complete --timeout=30s job/generate-configtx

# Generate the Genesis Block
echo "Generating Genesis Block..."
kubectl apply -f k8s/genesis-job-template.yml
echo "Waiting for genesis block generation to complete..."
kubectl wait --for=condition=complete --timeout=30s job/generate-genesis-block

# # Run Core Config Generation Job
# echo "Generating core.yaml for all peers..."
# sed -e "s/{{ORG_IDS}}/$ORG_IDS/g" k8s/core-config-job-template.yml > core-config-job.yaml
# kubectl apply -f core-config-job.yaml
# rm -f core-config-job.yaml
# Wait for core config job to finish
# echo "Waiting for core.yaml generation to complete..."
# kubectl wait --for=condition=complete --timeout=30s job/generate-core-config

# Run Orderer Config Generation Job
# echo "Generating core.yaml configmaps for all peers..."
# sed -e "s/{{ORDERER_ORGS}}/$ORG_IDS/g" k8s/orderer-config-job-template.yml > orderer-config-job.yaml
# kubectl apply -f orderer-config-job.yaml
# rm -f orderer-config-job.yaml
# # Wait for orderer config job to finish
# echo "Waiting for orderer.yaml generation to complete..."
# kubectl wait --for=condition=complete --timeout=30s orderer-config-generator

# Run Orderer config generation
echo "Generating orderer.yaml configmaps for all orderers..."
for ORG_ID in "${!ORGS[@]}"; do
    ORDERER_ID=$(echo "$ORG_ID" | sed 's/org//')
    sed -e "s/{{ORDERER_ID}}/$ORDERER_ID/g" k8s/orderer-configmap-template.yml > orderer-config-job-$ORDERER_ID.yaml
    kubectl apply -f orderer-config-job-$ORDERER_ID.yaml
    rm -f orderer-config-job-$ORDERER_ID.yaml
done

# Deploy services for each organization
for ORG_ID in "${!ORGS[@]}"; do
    ORG_NAME=${ORGS[$ORG_ID]}
    ORDERER_ID=$(echo "$ORG_ID" | sed 's/org//')

    # echo "Deploying Edge Node for $ORG_NAME ($ORG_ID)..."
    # sed -e "s/{{ORG_ID}}/$ORG_ID/g" -e "s/{{ORG_NAME}}/$ORG_NAME/g" k8s/edge-app-template.yml > edge-app-$ORG_ID.yaml
    # kubectl apply -f edge-app-$ORG_ID.yaml
    # rm -f edge-app-$ORG_ID.yaml

    # echo "Deploying IPFS Node for $ORG_NAME ($ORG_ID)..."
    # sed -e "s/{{ORG_ID}}/$ORG_ID/g" k8s/ipfs-template.yml > ipfs-node-$ORG_ID.yaml
    # kubectl apply -f ipfs-node-$ORG_ID.yaml
    # rm -f ipfs-node-$ORG_ID.yaml

    # echo "Deploying MongoDB for $ORG_NAME ($ORG_ID)..."
    # sed -e "s/{{ORG_ID}}/$ORG_ID/g" k8s/mongodb-template.yml > mongodb-$ORG_ID.yaml
    # kubectl apply -f mongodb-$ORG_ID.yaml
    # rm -f mongodb-$ORG_ID.yaml

    # echo "Deploying Peer Node for $ORG_NAME ($ORG_ID)..."
    # sed -e "s/{{ORG_ID}}/$ORG_ID/g" k8s/peer-template.yml > peer-$ORG_ID.yaml
    # kubectl apply -f peer-$ORG_ID.yaml
    # rm -f peer-$ORG_ID.yaml

    echo "Deploying Orderer Node for $ORG_NAME ($ORG_ID)..."
    sed -e "s/{{ORG_ID}}/$ORG_ID/g" -e "s/{{ORDERER_ID}}/$ORDERER_ID/g" k8s/orderer-template.yml > orderer-$ORG_ID.yaml
    kubectl apply -f orderer-$ORG_ID.yaml
    rm -f orderer-$ORG_ID.yaml
done

# Wait for peer and orderer deployments to be ready
echo "Waiting for all deployments to be ready..."
sleep 10  # Adjust time as needed

# Create the Fabric channel
echo "Creating Fabric channel..."
sed -e "s/{{ORDERER_ID}}/orderer1/g" k8s/create-channel-template.yml > create-channel.yaml
kubectl apply -f create-channel.yaml
rm -f create-channel.yaml

# Wait for channel creation
echo "Waiting for channel creation to complete..."
sleep 10

# Have all peer nodes join the channel
echo "Adding all peer nodes to the channel..."
sed "s/{{ORG_IDS}}/$(echo ${!ORGS[@]} | tr ' ' ',')/g" k8s/join-channel-template.yml > join-channel.yaml
kubectl apply -f join-channel.yaml
rm -f join-channel.yaml

# Wait for peers to join the channel
echo "Waiting for all peers to join the channel..."
sleep 10

# Update anchor peers
echo "Updating anchor peers for all organizations..."
sed "s/{{ORG_IDS}}/$(echo ${!ORGS[@]} | tr ' ' ',')/g" k8s/update-anchor-peers-template.yml > update-anchor-peers.yaml
kubectl apply -f update-anchor-peers.yaml
rm -f update-anchor-peers.yaml

echo "Fabric network setup completed successfully!"
