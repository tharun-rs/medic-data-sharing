#!/bin/bash

# Stop all deployments if "stop" is passed as the first argument
if [ "$1" == "stop" ]; then
    echo "Stopping all deployments..."
    kubectl delete deployments --all
    kubectl delete services --all
    kubectl delete jobs --all
    kubectl delete configmaps --all
    kubectl delete secrets --all
    sudo rm -rf /home/tharunrs/fabric-data/*
    exit 0
fi

# Define organizations
declare -A ORGS
ORGS=( ["org1"]="Org1" ["org2"]="Org2" ["org3"]="Org3" )

ORG_IDS=$(echo ${!ORGS[@]} | tr ' ' ',')

loadDockerContainer() {
    # Create images for all apps
    docker build -t edge-app:latest ./edge-app
    kind load docker-image edge-app:latest
    docker build -t ipfs-app:latest ./ipfs
    kind load docker-image ipfs-app:latest
    docker build -t bootstrap-app:latest ./bootstraps
    kind load docker-image bootstrap-app:latest
    # docker build -t chaincode/pii:1.0 ./blockchain/chaincode/pii-access-request-contract
    # kind load docker-image chaincode/pii:1.0
    # docker build -t chaincode/phi:1.0 ./blockchain/chaincode/phi-access-request-contract
    # kind load docker-image chaincode/phi:1.0
    # docker build -t chaincode/data:1.0 ./blockchain/chaincode/data-upload-contract
    # kind load docker-image chaincode/data:1.0
    # docker build -t chaincode/auth:1.0 ./blockchain/chaincode/authorization-contract
    # kind load docker-image chaincode/auth:1.0
}

createVolume() {
    # Create a PVC for crypto materials
    kubectl apply -f k8s/pvc.yml
}

generateRootCert() {
    #  Run the following command to generate TLS certificates for Fabric CA only once
    if [ ! -f tls-cert.pem ] || [ ! -f tls-key.pem ]; then
        openssl req -newkey rsa:2048 -nodes -keyout tls-key.pem \
            -x509 -days 365 -out tls-cert.pem \
            -subj "/CN=fabric-ca" \
            -addext "subjectAltName = DNS:fabric-ca, DNS:fabric-ca.default.svc.cluster.local" \
            -addext "extendedKeyUsage = serverAuth, clientAuth" \
            -addext "keyUsage = digitalSignature, keyEncipherment"
    fi
    kubectl create secret generic fabric-ca-tls --from-file=tls-cert.pem --from-file=tls-key.pem
}

deployFabricCA() {
    # Deploy Fabric CA
    kubectl create configmap fabric-ca-config --from-file=k8s/fabric-ca-server-config.yaml
    kubectl apply -f k8s/fabric-ca.yml
    echo "waiting for Fabric CA to be ready..."
    sleep 10
}

fabricEnroll() {
    for ORG_ID in "${!ORGS[@]}"; do
        ORG_NAME=${ORGS[$ORG_ID]}

        echo "Running Fabric Enroll Job for $ORG_NAME ($ORG_ID)..."
        sed -e "s/{{ORG_ID}}/$ORG_ID/g" k8s/fabric-enroll-job-template.yml > fabric-enroll-$ORG_ID.yaml
        kubectl apply -f fabric-enroll-$ORG_ID.yaml
        rm -f fabric-enroll-$ORG_ID.yaml

    done
    echo "Waiting for Fabric CA enrollment jobs to complete..."
    sleep 10
}

generateConfigTX() {
    echo "Generating ConfigTx.yaml..."
    sed -e "s/{{ORG_IDS}}/$ORG_IDS/g" k8s/configtx-job-template.yml > configtx-job.yaml
    kubectl apply -f configtx-job.yaml
    rm -f configtx-job.yaml
    echo "Waiting for configtx.yaml generation to complete..."
    kubectl wait --for=condition=complete --timeout=30s job/generate-configtx
}

generateGenesisBlock() {
    # Generate the Genesis Block
    echo "Generating Genesis Block..."
    kubectl apply -f k8s/genesis-job-template.yml
    echo "Waiting for genesis block generation to complete..."
    kubectl wait --for=condition=complete --timeout=30s job/generate-genesis-block
}

deployServiceAndDeployments() {
    # Deploy services for each organization
    for ORG_ID in "${!ORGS[@]}"; do
        ORG_NAME=${ORGS[$ORG_ID]}
        ORDERER_ID=$(echo "$ORG_ID" | sed 's/org//')

        echo "Deploying Edge Node for $ORG_NAME ($ORG_ID)..."
        sed -e "s/{{ORG_ID}}/$ORG_ID/g" -e "s/{{ORG_NAME}}/$ORG_NAME/g" k8s/edge-app-template.yml > edge-app-$ORG_ID.yaml
        kubectl apply -f edge-app-$ORG_ID.yaml
        rm -f edge-app-$ORG_ID.yaml

        echo "Deploying IPFS Node for $ORG_NAME ($ORG_ID)..."
        sed -e "s/{{ORG_ID}}/$ORG_ID/g" k8s/ipfs-template.yml > ipfs-node-$ORG_ID.yaml
        kubectl apply -f ipfs-node-$ORG_ID.yaml
        rm -f ipfs-node-$ORG_ID.yaml

        echo "Deploying MongoDB for $ORG_NAME ($ORG_ID)..."
        sed -e "s/{{ORG_ID}}/$ORG_ID/g" k8s/mongodb-template.yml > mongodb-$ORG_ID.yaml
        kubectl apply -f mongodb-$ORG_ID.yaml
        rm -f mongodb-$ORG_ID.yaml

        echo "Deploying Orderer Node for $ORG_NAME ($ORG_ID)..."
        sed -e "s/{{ORG_ID}}/$ORG_ID/g" -e "s/{{ORDERER_ID}}/$ORDERER_ID/g" k8s/orderer-template.yml > orderer-$ORG_ID.yaml
        kubectl apply -f orderer-$ORG_ID.yaml
        rm -f orderer-$ORG_ID.yaml

        echo "Deploying Peer Node for $ORG_NAME ($ORG_ID)..."
        sed -e "s/{{ORG_ID}}/$ORG_ID/g" k8s/peer-template.yml > peer-$ORG_ID.yaml
        kubectl apply -f peer-$ORG_ID.yaml
        rm -f peer-$ORG_ID.yaml
    done
    # Wait for peer and orderer deployments to be ready
    echo "Waiting for all deployments to be ready..."
    sleep 10  # Adjust time as needed
}

createChannel() {
    # Create the Fabric channel
    echo "Creating Fabric channel..."
    sed -e "s/{{NO_OF_ORDERERS}}/${#ORGS[@]}/g" k8s/create-channel-template.yml > create-channel.yaml
    kubectl apply -f create-channel.yaml
    rm -f create-channel.yaml

    # Wait for channel creation
    echo "Waiting for channel creation to complete..."
    kubectl wait --for=condition=complete --timeout=30s job/create-channel
}

peersJoinChannel() {
    # Have all peer nodes join the channel
    for ORG_KEY in "${!ORGS[@]}"; do
        ORG_NUM=${ORG_KEY//[^0-9]/}  # Removes non-numeric chars
        JOB_NAME="join-peer0org${ORG_NUM}"
        echo "joining peer0org${ORG_NUM} to channel"
        echo "jobid: ${JOB_NAME}"

        sed -e "s/{{ORG_NUM}}/${ORG_NUM}/g" k8s/join-channel-template.yml > k8s/${JOB_NAME}.yaml
        kubectl apply -f k8s/${JOB_NAME}.yaml
        rm -f k8s/${JOB_NAME}.yaml
    done
    # Wait for peers to join the channel
    echo "Waiting for all peers to join the channel..."
    sleep 10
}

packageChaincode() {
    # Package chaincode
    if [ ! -f blockchain/chaincode/auth.tar.gz ]; then
        sed -e "s/{{CHAINCODE_NAME}}/auth/g" -e "s/{{CHAINCODE_FOLDER}}/authorization-contract/g" k8s/package-chaincode-template.yml > k8s/install-chaincode.yaml
        kubectl apply -f k8s/install-chaincode.yaml
        rm -f k8s/install-chaincode.yaml
    fi
    if [ ! -f blockchain/chaincode/data.tar.gz ]; then
        sed -e "s/{{CHAINCODE_NAME}}/data/g" -e "s/{{CHAINCODE_FOLDER}}/data-upload-contract/g" k8s/package-chaincode-template.yml > k8s/install-chaincode.yaml
        kubectl apply -f k8s/install-chaincode.yaml
        rm -f k8s/install-chaincode.yaml
    fi
    if [ ! -f blockchain/chaincode/pii.tar.gz ]; then
        sed -e "s/{{CHAINCODE_NAME}}/pii/g" -e "s/{{CHAINCODE_FOLDER}}/pii-access-request-contract/g" k8s/package-chaincode-template.yml > k8s/install-chaincode.yaml
        kubectl apply -f k8s/install-chaincode.yaml
        rm -f k8s/install-chaincode.yaml
    fi
    if [ ! -f blockchain/chaincode/phi.tar.gz ]; then
        sed -e "s/{{CHAINCODE_NAME}}/phi/g" -e "s/{{CHAINCODE_FOLDER}}/phi-access-request-contract/g" k8s/package-chaincode-template.yml > k8s/install-chaincode.yaml
        kubectl apply -f k8s/install-chaincode.yaml
        rm -f k8s/install-chaincode.yaml
    fi
}

installChaincode() {
    # Install chaincode on all peers
    for ORG_KEY in "${!ORGS[@]}"; do
        ORG_NUM=${ORG_KEY//[^0-9]/}  # Removes non-numeric chars
        JOB_NAME="install-chaincode-peer0org${ORG_NUM}"
        echo "install chaincode  on peer0org${ORG_NUM}"
        echo "jobid: ${JOB_NAME}"

        sed -e "s/{{ORG_NUM}}/${ORG_NUM}/g" k8s/install-chaincode-template.yml > k8s/${JOB_NAME}.yaml
        kubectl apply -f k8s/${JOB_NAME}.yaml
        rm -f k8s/${JOB_NAME}.yaml
    done
}

deleteJobs() {
    # Delete all jobs
    kubectl delete jobs --all
}

if [ "$1" == "load" ]; then
    loadDockerContainer
    exit 0
fi
if [ "$1" == "create-volume" ]; then
    createVolume
    exit 0
fi
if [ "$1" == "generate-root-cert" ]; then
    generateRootCert
    exit 0
fi
if [ "$1" == "deploy-fabric-ca" ]; then
    deployFabricCA
    exit 0
fi
if [ "$1" == "fabric-enroll" ]; then
    fabricEnroll
    exit 0
fi
if [ "$1" == "generate-configtx" ]; then
    generateConfigTX
    exit 0
fi
if [ "$1" == "generate-genesis-block" ]; then
    generateGenesisBlock
    exit 0
fi
if [ "$1" == "deploy-service-and-deployments" ]; then
    deployServiceAndDeployments
    exit 0
fi
if [ "$1" == "create-channel" ]; then
    createChannel
    exit 0
fi
if [ "$1" == "peers-join-channel" ]; then
    peersJoinChannel
    exit 0
fi
if [ "$1" == "delete-jobs" ]; then
    deleteJobs
    exit 0
fi
if [ "$1" == "all" ]; then
    loadDockerContainer
    createVolume
    generateRootCert
    deployFabricCA
    fabricEnroll
    generateConfigTX
    generateGenesisBlock
    deployServiceAndDeployments
    createChannel
    peersJoinChannel
fi
if [ "$1" == "restart" ]; then
    echo "Stopping all deployments..."
    kubectl delete deployments --all
    kubectl delete services --all
    kubectl delete jobs --all
    kubectl delete configmaps --all
    kubectl delete secrets --all
    sudo rm -rf /home/tharunrs/fabric-data/*
    loadDockerContainer
    createVolume
    generateRootCert
    deployFabricCA
    fabricEnroll
    generateConfigTX
    generateGenesisBlock
    deployServiceAndDeployments
    createChannel
    peersJoinChannel
fi
if [ -z "$1" ]; then
    echo "No argument provided. Please provide an argument."
    echo "Usage: $0 {all|stop|delete-jobs|load|create-volume|generate-root-cert|deploy-fabric-ca|fabric-enroll|generate-configtx|generate-genesis-block|deploy-service-and-deployments|create-channel|peers-join-channel|install-chaincode}"
fi
